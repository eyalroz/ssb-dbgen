/* 
 * this file allows the compilation of DBGEN to be tailored to specific
 * architectures and operating systems. Some options are grouped 
 * together to allow easier compilation on a given vendor's hardware.
 * 
 * The following #defines will effect the code:
 *   SEPARATOR         -- character used to separate fields in flat files
 *   STDLIB_HAS_GETOPT -- to prevent confilcts with gloabal getopt() 
 *   MDY_DATE          -- generate dates as MM-DD-YY
 *   WIN32             -- support for WindowsNT
 *   DSS_HUGE          -- 64 bit data type
 *   HUGE_FORMAT       -- printf string for 64 bit data type
 *   HUGE_COUNT        -- number of objects in DSS_HUGE
 *   EOL_HANDLING      -- flat files don't need final column separator
 *   DSS_PROC          -- a process-id-based random seeding factor
 *
 *   DATABASE defines
 *   ================
 *   DB2        -- use DB2 dialect in QGEN
 *   INFORMIX   -- use Informix dialect in QGEN
 *   SQLSERVER  -- use SQLSERVER dialect in QGEN
 *   SYBASE     -- use Sybase dialect in QGEN
 *   TDAT       -- use Teradata dialect in QGEN
 *
 *   WORKLOAD defines
 *   ================
 *   TPCH              -- make will create TPCH (set in makefile)
 */

/*		POSIX headers related macros		*/
#cmakedefine HAVE_UNISTD_H
#cmakedefine HAVE_FCNTL_H
#cmakedefine HAVE_SYS_WAIT_H
#cmakedefine HAVE_SYS_TYPES_H
#cmakedefine HAVE_SYS_STAT_H
#cmakedefine HAVE_STRINGS_H
#cmakedefine HAVE_INTTYPES_H

/*		Windows headers related macros		*/
#cmakedefine HAVE_PROCESS_H
#cmakedefine HAVE_WINDOWS_H	

/*		Another headers related macros		*/
#cmakedefine HAVE_STDINT_H
#cmakedefine HAVE_SYS_BITTYPES_H
#cmakedefine HAVE_MALLOC_IN_STDLIB
#cmakedefine HAVE_MALLOC_H

#define RNG_TEST
#define _FILE_OFFSET_BITS 64

#if (@SIZEOF_LONG@ == 8)
#define SIGNED_64_BIT_C_TYPE long
#define SIGNED_64_BIT_PRINTF_MODIFIER "l"
#else
#if (@SIZEOF_LONG_LONG@ == 8)
#define SIGNED_64_BIT_C_TYPE long long
#define SIGNED_64_BIT_PRINTF_MODIFIER "ll"
#else
#if (@SIZEOF_SHORT@ == "8")
#define SIGNED_64_BIT_C_TYPE short
#define SIGNED_64_BIT_PRINTF_MODIFIER "s"
#else
#if (@SIZEOF_INT@ == "8")
#define SIGNED_64_BIT_C_TYPE int
#define SIGNED_64_BIT_PRINTF_MODIFIER
#else
#error "No standard C integer type has size 8"
#endif
#endif
#endif
#endif

#define DSS_HUGE          SIGNED_64_BIT_C_TYPE
#define HUGE_FORMAT       "%" SIGNED_64_BIT_PRINTF_MODIFIER "d"
#define HUGE_COUNT        1
#define HUGE_DATE_FORMAT  "%02" SIGNED_64_BIT_PRINTF_MODIFIER "d"

#cmakedefine01 HAVE_GETOPT
#if (HAVE_GETOPT == 1)
#define STDLIB_HAS_GETOPT 1
#endif

#cmakedefine01 HAVE_GETPID
#if (HAVE_GETPID == 1)
#define DSS_PROC getpid()
#else
#define DSS_PROC 1
#endif

#cmakedefine HAVE_KILL
#cmakedefine HAVE_FORK
#cmakedefine HAVE_WAIT

#define RNG_A	6364136223846793005ull
#define RNG_C	1ull

#if (defined(_WIN32) && !defined(_POSIX)) || defined(__CYGWIN__)
#define PATH_SEP '\\'
#else
#define PATH_SEP '/'
#endif

// These macros aren't being used in code currently and parallel load is allowed 
// only for POSIX-compatible systems (with fork, kill and wait).
//#if (defined(HAVE_UNISTD_H) && defined(HAVE_SYS_WAIT_H))
//#define KILL(pid) kill(SIGUSR1, pid)
//#define SET_HANDLER(proc) signal(SIGUSR1, proc)
//#define SPAWN   fork
//#define WAIT(res, pid) wait(res)
//#else
typedef int pid_t;
//#define SET_HANDLER(proc) signal(SIGINT, proc)
//#define KILL(pid) TerminateProcess(OpenProcess(PROCESS_TERMINATE,FALSE,pid),3)
//
//#if (defined (__WATCOMC__))
//#define SPAWN()   spawnv(P_NOWAIT, spawn_args[0], spawn_args)
//#define WAIT(res, pid) cwait(res, pid, WAIT_CHILD)
//#else /* MSVC (?) */
//#define SPAWN()   _spawnv(_P_NOWAIT, spawn_args[0], spawn_args)
//#define WAIT(res, pid) _cwait(res, pid, _WAIT_CHILD)
//#define getpid          _getpid
//#endif /* (defined (__WATCOMC__)) */
//#endif /* (defined(HAVE_UNISTD_H) && defined(HAVE_SYS_WAIT_H)) */


#ifdef _MSC_VER

/* Disable warnings about "foo() converted to foo(void)" */
#pragma warning(disable:4255)

/* Disable warnings about "added padding to struct data members" */
#pragma warning(disable:4820)

/* Disable warnings about "function not inlined" */
#pragma warning(disable:4710)
#endif

